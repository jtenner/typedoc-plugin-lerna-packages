{"version":3,"file":"plugin.js","sourceRoot":"","sources":["plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport * as glob from 'glob';\r\nimport { join } from \"path\";\r\nimport { DeclarationReflection } from \"typedoc\";\r\nimport { Component, ConverterComponent } from \"typedoc/dist/lib/converter/components\";\r\nimport { Context } from \"typedoc/dist/lib/converter/context\";\r\nimport { Converter } from \"typedoc/dist/lib/converter/converter\";\r\nimport { Comment } from \"typedoc/dist/lib/models/comments\";\r\nimport { ReflectionFlag, ReflectionKind } from \"typedoc/dist/lib/models/reflections/abstract\";\r\nimport { Option } from \"typedoc/dist/lib/utils/component\";\r\nimport { ParameterType } from \"typedoc/dist/lib/utils/options/declaration\";\r\n\r\n\r\n@Component({name: 'lerna-packages'})\r\nexport class LernaPackagesPlugin extends ConverterComponent {\r\n    @Option({\r\n        name: 'lernaExclude',\r\n        help: 'List of package names that should be excluded.',\r\n        type: ParameterType.Array,\r\n        defaultValue: []\r\n    })\r\n    exclude!: string[];\r\n\r\n    private lernaPackages: { [name: string]: string } = {};\r\n\r\n    constructor(owner: Converter) {\r\n        super(owner);\r\n\r\n        const lernaConfig = JSON.parse(fs.readFileSync('lerna.json', 'utf8'));\r\n        let packages: string[] = [];\r\n        if (lernaConfig.packages) {\r\n            packages = lernaConfig.packages;\r\n        } else if (lernaConfig.useWorkspaces) {\r\n            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\r\n            packages = packageJson.workspaces;\r\n        }\r\n\r\n        if (!packages || packages.length === 0) {\r\n            throw new Error('No lerna.json found or packages defined.');\r\n        }\r\n\r\n        for (const packageGlob of packages) {\r\n            const thisPkgs = glob.sync(packageGlob, {\r\n                ignore: ['node_modules']\r\n            });\r\n\r\n            for (const pkg of thisPkgs) {\r\n                const pkgConfig = JSON.parse(fs.readFileSync(join(pkg, 'package.json'), 'utf8'));\r\n                this.lernaPackages[pkgConfig['name']] = pkg;\r\n            }\r\n        }\r\n\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve.bind(this)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        console.log('Lerna packages found', this.lernaPackages);\r\n        const lernaPackageModules: { [lernaPackageName: string]: DeclarationReflection } = {};\r\n\r\n        const copyChildren = context.project.children.slice(0);\r\n\r\n        const cwd = process.cwd();\r\n\r\n        const findLernaPackageForChildOriginalName = (path: string): string => {\r\n            let fit = '';\r\n            for (const i in this.lernaPackages) {\r\n                if (!this.lernaPackages.hasOwnProperty(i)) continue;\r\n\r\n                const packagePath = join(cwd, this.lernaPackages[i]) + '/';\r\n                if (-1 !== (path + '/').indexOf(packagePath)) {\r\n                    if (i.length > fit.length) {\r\n                        fit = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!fit) {\r\n                throw new Error(`No lerna package found for ${path}`);\r\n            }\r\n\r\n            return fit;\r\n        };\r\n\r\n        context.project.children.length = 0;\r\n        for (const i in this.lernaPackages) {\r\n\r\n            const fullPath = join(cwd, this.lernaPackages[i]);\r\n            const reflection = new DeclarationReflection(i, ReflectionKind.Module, context.project);\r\n            lernaPackageModules[i] = reflection;\r\n            reflection.originalName = fullPath;\r\n            reflection.flags.setFlag(ReflectionFlag.Exported, true);\r\n            reflection.sources = [{\r\n                character: 0,\r\n                fileName: fullPath,\r\n                line: 0,\r\n            }];\r\n            reflection.children = [];\r\n\r\n            const readMePath = join(fullPath, 'README.md');\r\n\r\n            if (fs.existsSync(readMePath)) {\r\n                let readme = fs.readFileSync(readMePath);\r\n                reflection.comment = new Comment(\"\", readme.toString());\r\n            }\r\n        }\r\n\r\n        for (const child of copyChildren) {\r\n            const lernaPackageName = findLernaPackageForChildOriginalName(child.originalName);\r\n\r\n\r\n            if (!lernaPackageModules[lernaPackageName]) {\r\n                throw new Error(`lerna package module for ${lernaPackageName} not found.`);\r\n            }\r\n\r\n            // console.log('lernaPackageModules[lernaPackageName]', lernaPackageModules[lernaPackageName]);\r\n            if (child.kindOf(ReflectionKind.ExternalModule) || child.kindOf(ReflectionKind.Module)) {\r\n                console.log(`put ${child.name} stuff into ${lernaPackageName}`);\r\n                if (child.children) {\r\n                    for (const cc of child.children) {\r\n                        lernaPackageModules[lernaPackageName].children.push(cc);\r\n                        cc.parent = lernaPackageModules[lernaPackageName];\r\n                    }\r\n                }\r\n            } else {\r\n                lernaPackageModules[lernaPackageName].children.push(child);\r\n                child.parent = lernaPackageModules[lernaPackageName];\r\n            }\r\n        }\r\n\r\n        for (const i in lernaPackageModules) {\r\n            if (-1 !== this.exclude.indexOf(i)) {\r\n                continue;\r\n            }\r\n\r\n            if (lernaPackageModules[i].children && lernaPackageModules[i].children.length > 0) {\r\n                context.project.children.push(lernaPackageModules[i]);\r\n                context.registerReflection(lernaPackageModules[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}